{"version":3,"sources":["hooks/useModalContainer.js","hooks/useUsersContainer.js","components/Snackbars/CommonSnackbar/index.js","components/Snackbars/CommonSnackbar/CommonSnackbar.js","components/Snackbars/ErrorSnackbar/index.js","components/Snackbars/ErrorSnackbar/ErrorSnackbar.js","components/Snackbars/InfoSnackbar/index.js","components/Snackbars/InfoSnackbar/InfoSnackbar.js","components/UsersGrids/UsersGridLayout/UsersGridLayoutItem.js","components/UsersGrids/UsersGridLayout/UsersGridLayout.js","components/UsersGrids/UsersGridLayout/UsersGridLayoutMessage.js","components/UsersGrids/UsersGridLayout/index.js","components/UsersGrids/UsersGridInfinite/UsersGridInfinite.js","components/UsersGrids/UsersGridInfinite/index.js","components/UsersGrids/UsersGridSearched/UsersGridSearched.js","components/UsersGrids/UsersGridSearched/index.js","components/UserModal/UserModalContent/UserModalContentTypographyGrid.js","components/UserModal/UserModalContent/UserModalContentInfo.js","components/UserModal/UserModalContent/UserModalContentMedia.js","components/UserModal/UserModalContent/UserModalContent.js","components/UserModal/UserModalContent/index.js","components/UserModal/index.js","components/UserModal/UserModal.js","pages/MainPage/MainPage.js","pages/MainPage/index.js"],"names":["useModalContainer","dispatch","useDispatch","user","useSelector","selectModalUser","doOpenModal","useCallback","openModal","doCloseModal","closeModal","useUsersContainer","users","selectUsers","loading","selectLoading","error","selectError","hasMore","length","CONSTANTS","USERS_MAX_COUNT","useEffect","initializeUsers","doRequestMore","bottomReached","CommonSnackbar","action","message","open","severity","props","Snackbar","Alert","variant","ErrorSnackbar","Button","color","size","onClick","window","location","reload","InfoSnackbar","useStyles","makeStyles","theme","root","maxWidth","media","height","breakpoints","up","UsersGridLayoutItem","memo","onOpenModal","classes","fullName","useMemo","name","first","last","Card","className","CardActionArea","CardMedia","image","picture","large","title","CardContent","Typography","gutterBottom","component","Grid","container","justify","alignItems","item","xs","md","zeroMinWidth","noWrap","login","username","email","prevProps","nextProps","UsersGridLayout","direction","spacing","map","key","id","value","sm","lg","UsersGridLayoutMessage","margin","catalogEnd","marginTop","UsersGridInfinite","hideView","onLoadMore","scrollDisplayStyle","display","style","loadMore","threshold","padding","messageEmpty","UsersGridSearched","processing","show","scrollToTop","scroll","shouldShowNoResultMessage","Box","UserModalContentTypography","text","UserModalContentTypographyGrid","IconComponent","CustomContent","content","UserModalContentInfo","fullNameWithTitle","phone","cell","street","number","postcode","city","state","country","UserModalContentMedia","photoTitle","card","borderRadius","UserModalContent","UserModal","onCloseModal","isOpen","Boolean","Dialog","fullWidth","onClose","aria-labelledby","DialogTitle","MainPage","modalUser","loadingError","loadingUsers","useSearchContainer","processingSearch","foundUsers","showSearchResults","showResults"],"mappings":"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","file":"static/js/6.1e50c708.chunk.js","sourcesContent":["import { useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { openModal, closeModal, selectModalUser } from '../store/module';\r\n\r\nconst useModalContainer = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const user =  useSelector(selectModalUser);\r\n\r\n  const doOpenModal = useCallback((user) => {\r\n    dispatch(openModal(user))\r\n  }, [dispatch]);\r\n  const doCloseModal = useCallback(() => {\r\n    dispatch(closeModal());\r\n  }, [dispatch]);\r\n\r\n  return { user, doOpenModal, doCloseModal }\r\n};\r\n\r\nexport default useModalContainer;","import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport {\r\n  CONSTANTS,\r\n  bottomReached,\r\n  initializeUsers,\r\n  selectError,\r\n  selectLoading,\r\n  selectUsers\r\n} from '../store/module';\r\n\r\nconst useUsersContainer = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const users = useSelector(selectUsers);\r\n  const loading = useSelector(selectLoading);\r\n  const error = useSelector(selectError);\r\n  const hasMore = (users?.length < CONSTANTS.USERS_MAX_COUNT);\r\n\r\n  const doRequestMore = () => {\r\n    dispatch(bottomReached());\r\n  };\r\n\r\n  useEffect(() => {\r\n    const initialize = () => {\r\n      dispatch(initializeUsers());\r\n    };\r\n    initialize();\r\n  }, [dispatch]);\r\n\r\n  return { doRequestMore, error, hasMore, loading, users }\r\n};\r\n\r\nexport default useUsersContainer;","import CommonSnackbar from './CommonSnackbar'\r\n\r\nexport default CommonSnackbar;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\n\r\nconst CommonSnackbar = ({ action, message, open, severity, ...props }) => {\r\n  return (\r\n    <Snackbar\r\n      {...props}\r\n      open={open}\r\n    >\r\n      <Alert\r\n        variant=\"filled\"\r\n        severity={severity}\r\n        action={action}\r\n      >\r\n        {message}\r\n      </Alert>\r\n    </Snackbar>\r\n  )\r\n};\r\n\r\nexport default CommonSnackbar;\r\n\r\nCommonSnackbar.propTypes = {\r\n  action: PropTypes.element,\r\n  message: PropTypes.string.isRequired,\r\n  open: PropTypes.bool,\r\n  severity: PropTypes.oneOf(['success', 'error', 'info', 'warning']),\r\n  props: PropTypes.arrayOf(PropTypes.any)\r\n};","import ErrorSnackbar from './ErrorSnackbar';\r\n\r\nexport default ErrorSnackbar;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport CommonSnackbar from '../CommonSnackbar';\r\n\r\nconst ErrorSnackbar = ({ open }) => {\r\n  const doReload = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  return (\r\n    <CommonSnackbar\r\n      action={\r\n        <Button\r\n          color=\"inherit\"\r\n          variant=\"outlined\"\r\n          size=\"medium\"\r\n          onClick={doReload}\r\n        >\r\n          Reload app\r\n        </Button>\r\n      }\r\n      open={open}\r\n      message=\"Error occurred, please click button to reload app\"\r\n      severity=\"error\"\r\n    />\r\n  )\r\n};\r\n\r\nexport default ErrorSnackbar;\r\n\r\nErrorSnackbar.propTypes = {\r\n  open: PropTypes.bool\r\n};","import InfoSnackbar from './InfoSnackbar'\r\n\r\nexport default InfoSnackbar;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport CommonSnackbar from '../CommonSnackbar';\r\n\r\nconst InfoSnackbar = ({ message, open }) => {\r\n  return (\r\n    <CommonSnackbar\r\n      open={open}\r\n      message={message}\r\n      severity=\"info\"\r\n    />\r\n  )\r\n};\r\n\r\nexport default InfoSnackbar;\r\n\r\nInfoSnackbar.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n  open: PropTypes.bool\r\n};","import React, { useMemo, memo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    maxWidth: 260\r\n  },\r\n  media: {\r\n    height: 80,\r\n    [theme.breakpoints.up('sm')]: {\r\n      height: 100,\r\n    },\r\n    [theme.breakpoints.up('md')]: {\r\n      height: 120,\r\n    },\r\n    [theme.breakpoints.up('lg')]: {\r\n      height: 150,\r\n    }\r\n  }\r\n}));\r\n\r\nconst shouldNotRerender = (prevProps, nextProps) => {\r\n  return prevProps.user === nextProps.user;\r\n};\r\n\r\nconst UsersGridLayoutItem = memo(({ user, onOpenModal }) => {\r\n  const classes = useStyles();\r\n\r\n  const handleClick = () => {\r\n    onOpenModal(user);\r\n  };\r\n\r\n  const fullName = useMemo(() => (\r\n    `${user.name.first} ${user.name.last}`\r\n  ), [user]);\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardActionArea\r\n        onClick={handleClick}\r\n      >\r\n        <CardMedia\r\n          className={classes.media}\r\n          image={user.picture.large}\r\n          title={`${fullName} face photo`}\r\n        />\r\n        <CardContent>\r\n          <Typography\r\n            gutterBottom\r\n            variant=\"h5\"\r\n            component=\"h2\"\r\n          >\r\n            {fullName}\r\n          </Typography>\r\n\r\n          <Grid\r\n            container\r\n            justify=\"flex-start\"\r\n            alignItems=\"stretch\"\r\n          >\r\n            <Grid item xs={3} md={2}>\r\n              <PersonIcon color=\"primary\" />\r\n            </Grid>\r\n            <Grid item xs={9} md={10} zeroMinWidth>\r\n              <Typography\r\n                noWrap\r\n                variant=\"body2\"\r\n                color=\"textSecondary\"\r\n                component=\"p\"\r\n              >\r\n                {user.login.username}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid container>\r\n            <Grid item xs={3} md={2}>\r\n              <EmailIcon color=\"primary\" />\r\n            </Grid>\r\n            <Grid item xs={9} md={10} zeroMinWidth>\r\n              <Typography\r\n                noWrap\r\n                variant=\"body2\"\r\n                color=\"textSecondary\"\r\n                component=\"p\"\r\n              >\r\n                {user.email}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n      </CardActionArea>\r\n    </Card>\r\n  );\r\n}, shouldNotRerender);\r\n\r\nexport default UsersGridLayoutItem;\r\n\r\nUsersGridLayoutItem.propTypes = {\r\n  user: PropTypes.shape({\r\n    name: PropTypes.shape({\r\n      first: PropTypes.string.isRequired,\r\n      last: PropTypes.string.isRequired\r\n    }).isRequired,\r\n    picture: PropTypes.shape({\r\n      large: PropTypes.string.isRequired\r\n    }).isRequired,\r\n    login: PropTypes.shape({\r\n      username: PropTypes.string.isRequired\r\n    }).isRequired,\r\n    email: PropTypes.string.isRequired\r\n  }).isRequired,\r\n  onOpenModal: PropTypes.func.isRequired\r\n};","import React, { memo } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport UsersGridLayoutItem from './UsersGridLayoutItem';\r\n\r\nconst shouldNotRerender = (prevProps, nextProps) => {\r\n  return prevProps.users === nextProps.users;\r\n};\r\n\r\nconst UsersGridLayout = memo(({ users, onOpenModal }) => {\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"row\"\r\n      justify=\"center\"\r\n      alignItems=\"center\"\r\n      spacing={4}\r\n    >\r\n      {users?.map((user) => (\r\n        <Grid\r\n          item\r\n          key={user.id.value}\r\n          xs={6}\r\n          sm={4}\r\n          md={3}\r\n          lg={2}\r\n        >\r\n          <UsersGridLayoutItem\r\n            user={user}\r\n            onOpenModal={onOpenModal}\r\n          />\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  );\r\n}, shouldNotRerender);\r\n\r\nexport default UsersGridLayout;\r\n\r\nUsersGridLayout.propTypes = {\r\n  users: PropTypes.array.isRequired,\r\n  onOpenModal: PropTypes.func.isRequired\r\n};","import React  from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst UsersGridLayoutMessage = ({ className, message }) => {\r\n  return (\r\n    <Grid\r\n      className={className}\r\n      container\r\n      justify=\"center\"\r\n      alignItems=\"center\"\r\n      spacing={4}\r\n    >\r\n      <Grid item>\r\n        <Typography\r\n          variant=\"h4\"\r\n          color=\"textSecondary\"\r\n        >\r\n          {message}\r\n        </Typography>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default UsersGridLayoutMessage;\r\n\r\nUsersGridLayoutMessage.propTypes = {\r\n  className: PropTypes.any,\r\n  message: PropTypes.string.isRequired\r\n};","import UsersGridLayout from './UsersGridLayout';\r\nimport UsersGridLayoutMessage from './UsersGridLayoutMessage';\r\n\r\nexport default UsersGridLayout;\r\n\r\nexport {\r\n  UsersGridLayoutMessage\r\n}","import React, { useMemo, memo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport UsersGridLayout, { UsersGridLayoutMessage } from '../UsersGridLayout';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    margin: theme.spacing(4)\r\n  },\r\n  catalogEnd: {\r\n    marginTop: theme.spacing(4)\r\n  }\r\n}));\r\n\r\nconst shouldNotRerender = (prevProps, nextProps) => {\r\n  return prevProps.users === nextProps.users\r\n    && prevProps.hideView === nextProps.hideView;\r\n};\r\n\r\nconst UsersGridInfinite = memo(({\r\n  hasMore,\r\n  users,\r\n  hideView,\r\n  onOpenModal,\r\n  onLoadMore\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  const scrollDisplayStyle = useMemo(\r\n    () => (hideView ? { display: 'none' } : {}),\r\n    [hideView]\r\n  );\r\n\r\n  return (\r\n    <InfiniteScroll\r\n      className={classes.root}\r\n      style={scrollDisplayStyle}\r\n      loadMore={onLoadMore}\r\n      hasMore={hasMore}\r\n      threshold={500}\r\n    >\r\n      <UsersGridLayout\r\n        users={users}\r\n        onOpenModal={onOpenModal}\r\n      />\r\n      {!hasMore && <UsersGridLayoutMessage\r\n        className={classes.catalogEnd}\r\n        message={'End of users catalog'}\r\n      />}\r\n    </InfiniteScroll>\r\n  );\r\n}, shouldNotRerender);\r\n\r\nexport default UsersGridInfinite;\r\n\r\nUsersGridInfinite.propTypes = {\r\n  hasMore: PropTypes.bool,\r\n  users: PropTypes.array.isRequired,\r\n  hideView: PropTypes.bool,\r\n  onOpenModal: PropTypes.func.isRequired,\r\n  onLoadMore: PropTypes.func.isRequired\r\n};","import UsersGridInfinite from './UsersGridInfinite';\r\n\r\nexport default UsersGridInfinite;","import React, { memo, useCallback, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport UsersGridLayout from '../UsersGridLayout/UsersGridLayout';\r\nimport UsersGridLayoutMessage from '../UsersGridLayout/UsersGridLayoutMessage';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    padding: `0 ${theme.spacing(4)}px`\r\n  },\r\n  messageEmpty: {\r\n    marginTop: theme.spacing(4)\r\n  }\r\n}));\r\n\r\nconst shouldNotRerender = (prevProps, nextProps) => {\r\n  return prevProps.users === nextProps.users\r\n    && prevProps.show === nextProps.show\r\n    && prevProps.processing === nextProps.processing;\r\n};\r\n\r\nconst UsersGridSearched = memo(({ processing, show, users, onOpenModal, ...props }) => {\r\n  const classes = useStyles();\r\n\r\n  const scrollToTop = useCallback(() => {\r\n    window.scroll(0,0);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    scrollToTop();\r\n  }, [users, scrollToTop]);\r\n\r\n  const shouldShowNoResultMessage = (!users?.length && !processing);\r\n\r\n  return (\r\n    <>\r\n      {show && (\r\n        <Box\r\n          className={classes.root}\r\n          {...props}\r\n        >\r\n          <UsersGridLayout\r\n            users={users}\r\n            onOpenModal={onOpenModal}\r\n          />\r\n          {shouldShowNoResultMessage && (\r\n            <UsersGridLayoutMessage\r\n              className={classes.messageEmpty}\r\n              message={'No matching results'}\r\n            />\r\n          )}\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n}, shouldNotRerender);\r\n\r\nexport default UsersGridSearched;\r\n\r\nUsersGridSearched.propTypes = {\r\n  processing: PropTypes.bool.isRequired,\r\n  show: PropTypes.bool,\r\n  users: PropTypes.array.isRequired,\r\n  onOpenModal: PropTypes.func.isRequired,\r\n  props: PropTypes.arrayOf(PropTypes.any)\r\n};","import UsersGridSearched from './UsersGridSearched';\r\n\r\nexport default UsersGridSearched;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst UserModalContentTypography = ({ text }) => (\r\n  <Typography\r\n    variant=\"body2\"\r\n    color=\"textSecondary\"\r\n    component=\"p\"\r\n  >\r\n    {text}\r\n  </Typography>\r\n);\r\n\r\nconst UserModalContentTypographyGrid = ({ IconComponent, CustomContent, text, ...props }) => {\r\n  return (\r\n    <Grid container {...props}>\r\n      <Grid item xs={2}>\r\n        { IconComponent }\r\n      </Grid>\r\n      <Grid item xs={10}>\r\n        {text\r\n          ? <UserModalContentTypography text={text} />\r\n          : CustomContent\r\n        }\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default UserModalContentTypographyGrid;\r\n\r\nexport {\r\n  UserModalContentTypography\r\n}\r\n\r\nUserModalContentTypographyGrid.propTypes = {\r\n  IconComponent: PropTypes.element.isRequired,\r\n  CustomContent: PropTypes.element,\r\n  text: PropTypes.string,\r\n  props: PropTypes.arrayOf(PropTypes.any)\r\n};\r\n\r\nUserModalContentTypography.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n};","import React, { useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport PhoneAndroidIcon from '@material-ui/icons/PhoneAndroid';\r\nimport PhoneIcon from '@material-ui/icons/Phone';\r\n\r\nimport UserModalContentTypographyGrid, {\r\n  UserModalContentTypography\r\n} from './UserModalContentTypographyGrid';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  content: {\r\n    margin: theme.spacing(1),\r\n    [theme.breakpoints.up('sm')]: {\r\n      margin: theme.spacing(2),\r\n    },\r\n  }\r\n}));\r\n\r\nconst UserModalContentInfo = ({ user }) => {\r\n  const classes = useStyles();\r\n\r\n  const fullNameWithTitle = useMemo(() => (\r\n    `${user.name.title} ${user.name.first} ${user.name.last}`\r\n  ), [user]);\r\n\r\n  return (\r\n    <CardContent className={classes.content}>\r\n      <Typography\r\n        gutterBottom\r\n        variant=\"h4\"\r\n        component=\"h2\"\r\n      >\r\n        {fullNameWithTitle}\r\n      </Typography>\r\n\r\n      <UserModalContentTypographyGrid\r\n        IconComponent={<PersonIcon color=\"primary\"/>}\r\n        text={user.login.username}\r\n      />\r\n\r\n      <UserModalContentTypographyGrid\r\n        IconComponent={<EmailIcon color=\"primary\"/>}\r\n        text={user.email}\r\n      />\r\n\r\n      <UserModalContentTypographyGrid\r\n        IconComponent={<PhoneIcon color=\"primary\"/>}\r\n        text={user.phone}\r\n      />\r\n\r\n      <UserModalContentTypographyGrid\r\n        IconComponent={<PhoneAndroidIcon color=\"primary\"/>}\r\n        text={user.cell}\r\n      />\r\n\r\n      <UserModalContentTypographyGrid\r\n        alignItems=\"center\"\r\n        IconComponent={<HomeIcon color=\"primary\"/>}\r\n        CustomContent={\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n          >\r\n            <Grid item xs>\r\n              <UserModalContentTypography\r\n                text={`${user.location.street.name} ${user.location.street.number}`}\r\n              />\r\n            </Grid>\r\n            <Grid item xs>\r\n              <UserModalContentTypography\r\n                text={`${user.location.postcode} ${user.location.city}`}\r\n              />\r\n            </Grid>\r\n            <Grid item xs>\r\n              <UserModalContentTypography\r\n                text={`${user.location.state} / ${user.location.country}`}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        }\r\n      />\r\n    </CardContent>\r\n  );\r\n};\r\n\r\nexport default UserModalContentInfo;\r\n\r\nUserModalContentInfo.propTypes = {\r\n  user: PropTypes.shape({\r\n    name: PropTypes.shape({\r\n      title: PropTypes.string.isRequired,\r\n      first: PropTypes.string.isRequired,\r\n      last: PropTypes.string.isRequired\r\n    }).isRequired,\r\n    login: PropTypes.shape({\r\n      username: PropTypes.string.isRequired\r\n    }).isRequired,\r\n    email: PropTypes.string.isRequired,\r\n    phone: PropTypes.string.isRequired,\r\n    cell: PropTypes.string.isRequired,\r\n    location: PropTypes.shape({\r\n      street: PropTypes.shape({\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.number.isRequired\r\n      }).isRequired,\r\n      postcode: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number\r\n      ]).isRequired,\r\n      city: PropTypes.string.isRequired,\r\n      state: PropTypes.string.isRequired,\r\n      country: PropTypes.string.isRequired\r\n    }).isRequired,\r\n  }).isRequired\r\n};","import React, { useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  media: {\r\n    height: 200,\r\n    [theme.breakpoints.up('sm')]: {\r\n      height: 260,\r\n    },\r\n    [theme.breakpoints.up('md')]: {\r\n      height: 300,\r\n    },\r\n    [theme.breakpoints.up('lg')]: {\r\n      height: 340,\r\n    }\r\n  }\r\n}));\r\n\r\nconst UserModalContentMedia = ({ user }) => {\r\n  const classes = useStyles();\r\n\r\n  const photoTitle = useMemo(() => (\r\n    `${user.name.title} ${user.name.first} ${user.name.last} photo`\r\n  ), [user]);\r\n\r\n  return (\r\n    <CardMedia\r\n      className={classes.media}\r\n      image={user.picture.large}\r\n      title={photoTitle}\r\n    />\r\n  );\r\n};\r\n\r\nexport default UserModalContentMedia;\r\n\r\nUserModalContentMedia.propTypes = {\r\n  user: PropTypes.shape({\r\n    name: PropTypes.shape({\r\n      title: PropTypes.string.isRequired,\r\n      first: PropTypes.string.isRequired,\r\n      last: PropTypes.string.isRequired\r\n    }).isRequired,\r\n    picture: PropTypes.shape({\r\n      large: PropTypes.string.isRequired\r\n    }).isRequired,\r\n  }).isRequired\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Card from '@material-ui/core/Card';\r\n\r\nimport UserModalContentInfo from './UserModalContentInfo';\r\nimport UserModalContentMedia from './UserModalContentMedia';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    borderRadius: 0\r\n  }\r\n});\r\n\r\nconst UserModalContent = ({ user }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.card}>\r\n      <UserModalContentMedia\r\n        user={user}\r\n      />\r\n      <UserModalContentInfo\r\n        user={user}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default UserModalContent;\r\n\r\nUserModalContent.propTypes = {\r\n  user: PropTypes.object.isRequired\r\n};","import UserModalContent from './UserModalContent';\r\n\r\nexport default UserModalContent;","import UserModal from './UserModal';\r\n\r\nexport default UserModal;","import React, { memo, useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nimport UserModalContent from './UserModalContent';\r\n\r\nconst shouldNotRerender = (prevProps, nextProps) => {\r\n  return prevProps.user === nextProps.user;\r\n};\r\n\r\nconst UserModal = memo(({ user, onCloseModal }) => {\r\n  const isOpen = useMemo(() => Boolean(user), [user]);\r\n\r\n  if (!user) { return null; }\r\n\r\n  return (\r\n    <Dialog\r\n      fullWidth={true}\r\n      maxWidth={'xs'}\r\n      onClose={onCloseModal}\r\n      aria-labelledby=\"user-dialog-title\"\r\n      open={isOpen}\r\n    >\r\n      <DialogTitle id=\"user-dialog-title\">\r\n        Details\r\n      </DialogTitle>\r\n\r\n      <UserModalContent\r\n        user={user}\r\n      />\r\n    </Dialog>\r\n  );\r\n}, shouldNotRerender);\r\n\r\nexport default UserModal;\r\n\r\nUserModal.propTypes = {\r\n  user: PropTypes.object,\r\n  onCloseModal: PropTypes.func.isRequired\r\n};","import React from 'react';\r\n\r\nimport useModalContainer from '../../hooks/useModalContainer';\r\nimport useSearchContainer from '../../hooks/useSearchContainer';\r\nimport useUsersContainer from '../../hooks/useUsersContainer';\r\n\r\nimport ErrorSnackbar from '../../components/Snackbars/ErrorSnackbar';\r\nimport InfoSnackbar from '../../components/Snackbars/InfoSnackbar';\r\nimport UsersGridInfinite from '../../components/UsersGrids/UsersGridInfinite';\r\nimport UsersGridSearched from '../../components/UsersGrids/UsersGridSearched';\r\nimport UserModal from '../../components/UserModal';\r\n\r\nconst MainPage = () => {\r\n  const { user: modalUser, doOpenModal, doCloseModal } = useModalContainer();\r\n  const { error: loadingError, hasMore, loading: loadingUsers, users, doRequestMore } = useUsersContainer();\r\n  const { processing: processingSearch, foundUsers, showResults: showSearchResults} = useSearchContainer();\r\n\r\n  return (\r\n    <>\r\n      <ErrorSnackbar\r\n        open={!!loadingError}\r\n      />\r\n      <InfoSnackbar\r\n        open={loadingUsers}\r\n        message={'Loading ... '}\r\n      />\r\n      <InfoSnackbar\r\n        open={processingSearch}\r\n        message={'Searching ... '}\r\n      />\r\n      <UserModal\r\n        user={modalUser}\r\n        onCloseModal={doCloseModal}\r\n      />\r\n      <UsersGridSearched\r\n        processing={processingSearch}\r\n        show={showSearchResults}\r\n        users={foundUsers}\r\n        onOpenModal={doOpenModal}\r\n      />\r\n      <UsersGridInfinite\r\n        hasMore={hasMore}\r\n        hideView={showSearchResults}\r\n        users={users}\r\n        onLoadMore={doRequestMore}\r\n        onOpenModal={doOpenModal}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import MainPage from './MainPage';\r\n\r\nexport default MainPage;"],"sourceRoot":""}